{
	// Place your Vampire5E workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Match (Capture Groups)": {
		"scope": "javascript,typescript",
		"prefix": "matchgroups",
		"body": [
			"match(/${0}/u).slice(1); // Returns simple array of capture groups in order, but only the first instance of each capture group."
		],
		"description": "= Capture Groups (Array)"
	},
	"Match (Multiple Full Matches)": {
		"scope": "javascript,typescript",
		"prefix": "matchfull",
		"body": [
			"match(/${0}/gu);"
		],
		"description": "= Full Match (String)"
	},
	"Command Menu": {
		"scope": "javascript,typescript",
		"prefix": "commandmenu",
		"body": [
			"D.CommandMenu(",
			"    {",
			"        title: \"\",",
			"        rows: [",
			"            {type: \"Title/Header\", contents: \"\", styles: {}}, /* [Header: height, width, color, bgColor, margin, padding, fontSize, fontFamily, fontVariant, fontWeight, border, textShadow, boxShadow, textAlign, lineHeight], [Title: height, color, margin, fontFamily, fontSize, lineHeight, bgColor, border] */",
			"            {type: \"(Clear)Body\", contents: \"BodyText\", styles: { }}, /* color, width, height, bgColor, margin, padding, fontFamily, fontSize, fontWeight, textAlign, textShadow, boxShadow, border, lineHeight */",
			"            {",
			"                type: \"ButtonLine\",",
			"                contents: [",
			"                    {text: \"Push One:\", styles: { }}, /* height, width, fontFamily, fontSize, bgColor, color, margin, textAlign, textIndent, padding, lineHeight */",
			"                    0,",
			"                    {name: \"Button1\", command: \"!reply <args>\", styles: { }}, /* height, lineHeight, width, fontFamily, margin, padding, fontSize, bgColor, color, border, fontWeight, textShadow, buttonHeight, buttonWidth, buttonPadding, buttonTransform */",
			"                    15",
			"                ],",
			"                buttonStyles: { }, /* height, lineHeight, width, fontFamily, margin, padding, fontSize, bgColor, color, border, fontWeight, textShadow, buttonHeight, buttonWidth, buttonPadding, buttonTransform */",
			"                styles: { } /* height, width, margin, textAlign */",
			"            },",
			"            {",
			"                type: \"Column\", // Each column is one row; the contents will be fit horizontally, so ensure width is <= (100 / length) percent.", 
			"                contents: [",
			"                    {",
			"                        title: \"\",",
			"                        rows: [",
			"                 // elements of D.CommandMenu calls to be spaced horizontally",
			"                        ]",
			"                    },",
			"                    {",
			"                        title: \"\",",
			"                        rows: [",
			"                 // elements of D.CommandMenu calls to be spaced horizontally",
			"                        ]",
			"                    },",
			"                    {title: \"\", rows: [ ]}",
			"                ],",
			"                styles: { /* width: (<= (100/panels) percent */ } /* (width, margin */",
			"            }",
			"        ],",
			"        blockStyles: { } /* color, bgGradient, bgColor, bgImage, border, margin, width, padding */",
			"    },",
			"    (commandString, objects) => { // IMPORTANT: return 'true' if you want to hold this function open for more commands",
            "        const params = D.ParseToObj(commandString, \",\", \"@\"); // key:value pairs must be in key@pairs for this to work. Multiple commands comma-delimited.",
			"    }",
			");"
		],
		"description": "Reminder of proper D.CommandMenu syntax."
	},
	"Detailed Command Menu": {
		"scope": "javascript,typescript",
		"prefix": "commandmenufull",
		"body": [			
			"/* MENU DATA:",
			"    {",
			"        title: <string>",
			"        rows: [",
			"            Each element represents a full-width horizontal <div> block, contained with \"block\".",
			"            Elements should be of the form:",
			"                {",
			"                    type:     <string: ",
			"                                   \"Title\", \"Header\", \"Body\", \"ClearBody\"",
			"                                   \"ButtonLine\"",
			"                                   \"Column\"",
			"                              >",
			"                    contents: <",
			"                        for TITLE, HEADER, BODY, CLEARBODY: <string>",
			"                        for COLUMN: <array: each element represents a HORIZONTAL panel, each given in the form of nested MENU DATA objects:",
			"                                        <list: {",
			"                                                   title: <string>,",
			"                                                   rows:  <array: (as MENU DATA)",
			"                                               }>",
			"                        for BUTTONLINE: <array: each element represents a LINE of buttons, which can contain any of three elements:",
			"                                                BUTTONSUBHEADERS: <list: {text, [styles]}>",
			"                                                BUTTONS:          <list: {name, command, [styles]}>",
			"                                                SPACERS:          <number: percentage of width OR 0 for equal spacing>",
			"                              >",
			"                    [buttonStyles]: <list of styles to apply to ALL of the buttons in a ButtonLine> (ButtonLine ONLY)",
			"                    [styles]: <list of style overrides>",
			"                }",
			"        ]",
			"        [blockStyles:] <list of style overrides for BLOCK wrapper.",
			"    }",
			"    */",
			"D.CommandMenu(",
			"    {",
			"        title: \"\",",
			"        rows: [",
			"            {type: \"Title/Header\", contents: \"\", styles: {}}, /* [Header: height, width, color, bgColor, margin, padding, fontSize, fontFamily, fontVariant, fontWeight, border, textShadow, boxShadow, textAlign, lineHeight], [Title: height, color, margin, fontFamily, fontSize, lineHeight, bgColor, border] */",
			"            {type: \"(Clear)Body\", contents: \"BodyText\", styles: { }} /* color, width, height, bgColor, margin, padding, fontFamily, fontSize, fontWeight, textAlign, textShadow, boxShadow, border, lineHeight */",
			"            {",
			"                type: \"ButtonLine\",",
			"                contents: [",
			"                    {text: \"Push One:\", styles: { } /* height, width, fontFamily, fontSize, bgColor, color, margin, textAlign, textIndent, padding, lineHeight */",
			"                    0,",
			"                    {name: \"Button1\", command: \"!reply <args>\", styles: { }} /* height, lineHeight, width, fontFamily, margin, padding, fontSize, bgColor, color, border, fontWeight, textShadow, buttonHeight, buttonWidth, buttonPadding, buttonTransform */",
			"                    15",
			"                ],",
			"                buttonStyles: { }  /* height, lineHeight, width, fontFamily, margin, padding, fontSize, bgColor, color, border, fontWeight, textShadow, buttonHeight, buttonWidth, buttonPadding, buttonTransform */",
			"                styles: { } /* height, width, margin, textAlign */",
			"            },",
			"            {",
			"                type: \"Column\", // Each column is one row; the contents will be fit horizontally, so ensure width is <= (100 / length) percent.", 
			"                contents: [",
			"                    {title: \"Column1\", rows: [\"...\"]},",
			"                    {title: \"Column2\", rows: [\"...\"]}",
			"                ],",
			"                styles: { } /* width, margin */",
			"            }",
			"        ],",
			"        blockStyles: { } /* color, bgGradient, bgColor, bgImage, border, margin, width, padding */",
			"    },",
			"    (commandString, objects) => { // IMPORTANT: return 'true' if you want to hold this function open for more commands",
            "        const params = D.ParseToObj(commandString, \",\", \"@\") // key:value pairs must be in key@pairs for this to work. Multiple commands comma-delimited.",
			"    }",
			");"
		],
		"description": "More verbose help for D.CommandMenu syntax."
	},
	"VAL": {
		"scope": "javascript,typescript",
		"prefix": "VAL",
		"body": [
			"if (VAL({${1:type}: ${2:var}})) {",
			"\t$0;",
			"}"
		],
		"description": "Validate, No Function Name"
	},	
	"VAL (+DB)": {
		"scope": "javascript,typescript",
		"prefix": "VALf",
		"body": [
			"if (VAL({${1:type}: ${2:var}, \"${3:funcName}\"})) {",
			"\t$0;",
			"}"
		],
		"description": "Validate, Full"
	},
	"Switch": {
		"scope": "javascript,typescript",
		"prefix": "switch",
		"body": [
			"switch (D.LCase(${1:call})) {",
			"\tcase \"${2:case1}\": {",
			"\t\t${0};",
			"\t\tbreak;",
			"\t}",
			"\t// no default",
			"}"
		],
		"description": "switch(D.LCase(call = args.shift())"
	},
	"Switch/Call": {
		"scope": "javascript,typescript",
		"prefix": "switchcall",
		"body": [
			"switch (D.LCase(call = args.shift())) {",
			"\tcase \"${1:case1}\": {",
			"\t\t${0};",
			"\t\tbreak;",
			"\t}",
			"\t// no default",
			"}"
		],
		"description": "switch(D.LCase(call = args.shift())"
	},
	"Case": {
		"scope": "javascript,typescript",
		"prefix": "ca",
		"body": [
			"case \"${1:case}\": {",
			"\t${0};",
			"\tbreak;",
			"}"
		],
		"description": "case \"...\": {}"
	},
	"For i": {
		"scope": "javascript,typescript",
		"prefix": "for",
		"body": [
			"for (let i = 0; i < ${1:maxVal}; i++) {",
			"\t${0};",
			"}"
		],
		"description": "for INCREMENT"
	},
	"For of": {
		"scope": "javascript,typescript",
		"prefix": "forof",
		"body": [
			"for (const ${1:enumVar} of ${2:array}) {",
			"\t${0};",
			"}"
		],
		"description": "for ARRAY"
	},
	"For of Entries": {
		"scope": "javascript,typescript",
		"prefix": "forent",
		"body": [
			"for (const [${1:key}, ${2:value}] of Object.entries(${3:listOrObject})) {",
			"\t${0};",
			"}"
		],
		"description": "for OBJECT (key/val pairs)"
	},
	"FindObjs": {
		"scope": "javascript,typescript",
		"prefix": "findobjs",
		"body": [
			"findObjs({",
			"\t_type: \"${1:type}\"",
			"});"
		],
		"description": "findObjs() [Roll20]"
	}

}